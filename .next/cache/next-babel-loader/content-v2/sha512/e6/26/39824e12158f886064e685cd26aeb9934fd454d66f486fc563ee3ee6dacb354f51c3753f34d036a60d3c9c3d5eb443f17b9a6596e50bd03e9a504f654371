{"ast":null,"code":"import NextAuth from \"next-auth\";\nimport Providers from \"next-auth/providers\";\nexport default NextAuth({\n  providers: [Providers.Credentials({\n    // The name to display on the sign in form (e.g. 'Sign in with...')\n    name: \"Credentials\",\n    authorize: async credentials => {\n      //console.log(\"credentials_:\", credentials);\n      try {\n        const data = {\n          username: credentials.username,\n          password: credentials.password\n        }; // API call associated with authentification\n        // look up the user from the credentials supplied\n\n        const user = await login(data);\n\n        if (user) {\n          // Any object returned will be saved in `user` property of the JWT\n          return Promise.resolve(user);\n        }\n      } catch (error) {\n        if (error) {\n          //console.log(error.response);\n          return Promise.reject(\"/authorize/signin?error=Invalid username or password\");\n        }\n      }\n    }\n  })],\n  pages: {\n    signIn: \"/authorize/signin\",\n    signOut: \"/auth/signout\",\n    error: \"/authorize/signin\",\n    // Error code passed in query string as ?error=\n    verifyRequest: \"/auth/verify-request\",\n    // (used for check email message)\n    newUser: null // If set, new users will be directed here on first sign in\n\n  }\n});","map":{"version":3,"sources":["/Users/allisterrampenthal/Documents/wuphf.chat/pages/api/auth/[...nextauth].js"],"names":["NextAuth","Providers","providers","Credentials","name","authorize","credentials","data","username","password","user","login","Promise","resolve","error","reject","pages","signIn","signOut","verifyRequest","newUser"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AAEA,eAAeD,QAAQ,CAAC;AACtBE,EAAAA,SAAS,EAAE,CACTD,SAAS,CAACE,WAAV,CAAsB;AACpB;AACAC,IAAAA,IAAI,EAAE,aAFc;AAGpBC,IAAAA,SAAS,EAAE,MAAOC,WAAP,IAAuB;AAChC;AAEA,UAAI;AACF,cAAMC,IAAI,GAAG;AACXC,UAAAA,QAAQ,EAAEF,WAAW,CAACE,QADX;AAEXC,UAAAA,QAAQ,EAAEH,WAAW,CAACG;AAFX,SAAb,CADE,CAKF;AACA;;AACA,cAAMC,IAAI,GAAG,MAAMC,KAAK,CAACJ,IAAD,CAAxB;;AACA,YAAIG,IAAJ,EAAU;AACR;AACA,iBAAOE,OAAO,CAACC,OAAR,CAAgBH,IAAhB,CAAP;AACD;AACF,OAZD,CAYE,OAAOI,KAAP,EAAc;AACd,YAAIA,KAAJ,EAAW;AACT;AACA,iBAAOF,OAAO,CAACG,MAAR,CACL,sDADK,CAAP;AAGD;AACF;AACF;AA1BmB,GAAtB,CADS,CADW;AA+BtBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,MAAM,EAAE,mBADH;AAELC,IAAAA,OAAO,EAAE,eAFJ;AAGLJ,IAAAA,KAAK,EAAE,mBAHF;AAGuB;AAC5BK,IAAAA,aAAa,EAAE,sBAJV;AAIkC;AACvCC,IAAAA,OAAO,EAAE,IALJ,CAKU;;AALV;AA/Be,CAAD,CAAvB","sourcesContent":["import NextAuth from \"next-auth\";\nimport Providers from \"next-auth/providers\";\n\nexport default NextAuth({\n  providers: [\n    Providers.Credentials({\n      // The name to display on the sign in form (e.g. 'Sign in with...')\n      name: \"Credentials\",\n      authorize: async (credentials) => {\n        //console.log(\"credentials_:\", credentials);\n\n        try {\n          const data = {\n            username: credentials.username,\n            password: credentials.password,\n          };\n          // API call associated with authentification\n          // look up the user from the credentials supplied\n          const user = await login(data);\n          if (user) {\n            // Any object returned will be saved in `user` property of the JWT\n            return Promise.resolve(user);\n          }\n        } catch (error) {\n          if (error) {\n            //console.log(error.response);\n            return Promise.reject(\n              \"/authorize/signin?error=Invalid username or password\"\n            );\n          }\n        }\n      },\n    }),\n  ],\n  pages: {\n    signIn: \"/authorize/signin\",\n    signOut: \"/auth/signout\",\n    error: \"/authorize/signin\", // Error code passed in query string as ?error=\n    verifyRequest: \"/auth/verify-request\", // (used for check email message)\n    newUser: null, // If set, new users will be directed here on first sign in\n  },\n});\n"]},"metadata":{},"sourceType":"module"}